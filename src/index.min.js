const express=require("express"),bodyParser=require("body-parser"),booleanParser=require("express-query-boolean"),numberParser=require("express-query-int"),cors=require("cors"),pdf=require("pdfjs"),tmp=require("tmp"),app=express(),port=3e3,limit=process.env.BODY_LIMIT||"1mb";async function print({browser:browser,htmlContents:htmlContents,options:options}){const page=await browser.newPage();return await page.setContent(htmlContents,{waitUntil:"networkidle0"}),page.pdf(options)}async function renderPage({browser:browser,url:url}){const page=await browser.newPage();return await page.goto(url,{waitUntil:"networkidle0"}),await page.waitFor(2e3),await page.evaluate(()=>document.documentElement.outerHTML)}function parseRequest(request){const{groups:{filename:filename}}=(request.query.filename||"document").match(/^(?<filename>.+?)(?:\.pdf)?$/);return{filename:filename,options:{format:"a4",landscape:!1,printBackground:!0,...request.query,path:null}}}app.use(express.json({limit:limit})),app.use(bodyParser.text({type:"text/html",limit:limit})),app.use(booleanParser()),app.use(numberParser());export function use(puppeteer){function launchBrowser(){return puppeteer.launch({headless:!0,args:["--no-sandbox","--disable-setuid-sandbox"]})}app.post("/",cors(),async(request,response)=>{const browser=await launchBrowser(),{filename:filename,options:options}=parseRequest(request),res=await print({htmlContents:request.body,browser:browser,options:options});await browser.close(),response.attachment(`${filename}.pdf`).send(res)}),app.post("/multiple",cors(),async(request,response)=>{const browser=await launchBrowser(),{filename:filename,options:options}=parseRequest(request),files=await Promise.all(request.body.pages.map(htmlContents=>{const{name:path,removeCallback:rm}=tmp.fileSync();return print({htmlContents:htmlContents,browser:browser,options:{...options,path:path}}).then(()=>({path:path,rm:rm}))})),res=files.reduce((merged,{path:path,rm:rm})=>(merged.addPagesOf(new pdf.ExternalDocument(fs.readFileSync(path))),rm(),merged),new pdf.Document);await browser.close();const buffer=await res.asBuffer();response.attachment(`${filename}.pdf`).send(buffer)}),app.post("/render",cors(),async(request,response)=>{const browser=await launchBrowser(),res=await renderPage({url:request.body,browser:browser});await browser.close(),response.send(res)}),app.options("/*",cors()),app.use((err,_,response,__)=>{response.status(500).send(err.stack)}),app.listen(3e3,err=>{if(err)return console.error("ERROR: ",err);console.log("HTML to PDF converter GG listening on port: 3000")})}